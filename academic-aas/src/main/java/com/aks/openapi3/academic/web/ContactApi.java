/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.aks.openapi3.academic.web;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.aks.openapi3.academic.model.Address;
import com.aks.openapi3.academic.model.Contact;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-08-23T23:23:43.733872+05:30[Asia/Kolkata]")

@Validated
@Api(value = "Contact", description = "the Contact API")
public interface ContactApi {

	default ContactApiDelegate getDelegate() {
		return new ContactApiDelegate() {
		};
	}

	/**
	 * POST /api/contacts : Add a new contact
	 *
	 * @param contact Contact to add. Cannot null or empty. (required)
	 * @return Contact created (status code 201)
	 */
	@ApiOperation(value = "Add a new contact", nickname = "addContact", notes = "", response = Contact.class, tags = {
			"contact", })
	@ApiResponses(value = { @ApiResponse(code = 201, message = "Contact created", response = Contact.class) })
	@RequestMapping(value = "/api/contacts", produces = { "*/*" }, consumes = { "application/json",
			"application/xml" }, method = RequestMethod.POST)
	default ResponseEntity<Contact> addContact(
			@ApiParam(value = "Contact to add. Cannot null or empty.", required = true) @Valid @RequestBody Contact contact) {
		return getDelegate().addContact(contact);
	}

	/**
	 * DELETE /api/contacts/{contactId} : Deletes a contact
	 *
	 * @param contactId Id of the contact to be delete. Cannot be empty. (required)
	 * @return Contact not found (status code 404) or successful operation (status
	 *         code 200)
	 */
	@ApiOperation(value = "Deletes a contact", nickname = "deleteContactById", notes = "", tags = { "contact", })
	@ApiResponses(value = { @ApiResponse(code = 404, message = "Contact not found"),
			@ApiResponse(code = 200, message = "successful operation") })
	@RequestMapping(value = "/api/contacts/{contactId}", method = RequestMethod.DELETE)
	default ResponseEntity<Void> deleteContactById(
			@ApiParam(value = "Id of the contact to be delete. Cannot be empty.", required = true) @PathVariable("contactId") Long contactId) {
		return getDelegate().deleteContactById(contactId);
	}

	/**
	 * GET /api/contacts : Find Contacts by name Name search by %name% format
	 *
	 * @param page Page number, default is 1 (optional, default to 1)
	 * @param name Name of the contact for search. (optional)
	 * @return successful operation (status code 200)
	 */
	@ApiOperation(value = "Find Contacts by name", nickname = "findAll", notes = "Name search by %name% format", response = Contact.class, responseContainer = "List", tags = {
			"contact", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "successful operation", response = Contact.class, responseContainer = "List") })
	@RequestMapping(value = "/api/contacts", produces = { "application/json",
			"application/xml" }, method = RequestMethod.GET)
	default ResponseEntity<List<Contact>> findAll(
			@ApiParam(value = "Page number, default is 1", defaultValue = "1") @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
			@ApiParam(value = "Name of the contact for search.") @Valid @RequestParam(value = "name", required = false) String name) {
		return getDelegate().findAll(page, name);
	}

	/**
	 * GET /api/contacts/{contactId} : Find contact by ID Returns a single contact
	 *
	 * @param contactId Id of the contact to be obtained. Cannot be empty.
	 *                  (required)
	 * @return successful operation (status code 200)
	 */
	@ApiOperation(value = "Find contact by ID", nickname = "findContactById", notes = "Returns a single contact", response = Contact.class, tags = {
			"contact", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = Contact.class) })
	@RequestMapping(value = "/api/contacts/{contactId}", produces = { "application/json",
			"application/xml" }, method = RequestMethod.GET)
	default ResponseEntity<Contact> findContactById(
			@ApiParam(value = "Id of the contact to be obtained. Cannot be empty.", required = true) @PathVariable("contactId") Long contactId) {
		return getDelegate().findContactById(contactId);
	}

	/**
	 * PATCH /api/contacts/{contactId} : Update an existing contact&#39;s address
	 *
	 * @param contactId Id of the contact to be update. Cannot be empty. (required)
	 * @param address   Contact&#39;s address to update. (required)
	 * @return Contact not found (status code 404) or successful operation (status
	 *         code 200)
	 */
	@ApiOperation(value = "Update an existing contact's address", nickname = "updateAddress", notes = "", tags = {
			"contact", })
	@ApiResponses(value = { @ApiResponse(code = 404, message = "Contact not found"),
			@ApiResponse(code = 200, message = "successful operation") })
	@RequestMapping(value = "/api/contacts/{contactId}", method = RequestMethod.PATCH)
	default ResponseEntity<Void> updateAddress(
			@ApiParam(value = "Id of the contact to be update. Cannot be empty.", required = true) @PathVariable("contactId") Long contactId,
			@ApiParam(value = "Contact's address to update.", required = true) @Valid @RequestBody Address address) {
		return getDelegate().updateAddress(contactId, address);
	}

	/**
	 * PUT /api/contacts/{contactId} : Update an existing contact
	 *
	 * @param contactId Id of the contact to be update. Cannot be empty. (required)
	 * @param contact   Contact to update. Cannot null or empty. (required)
	 * @return Contact not found (status code 404) or Validation exception (status
	 *         code 405) or Invalid ID supplied (status code 400) or successful
	 *         operation (status code 200)
	 */
	@ApiOperation(value = "Update an existing contact", nickname = "updateContact", notes = "", tags = { "contact", })
	@ApiResponses(value = { @ApiResponse(code = 404, message = "Contact not found"),
			@ApiResponse(code = 405, message = "Validation exception"),
			@ApiResponse(code = 400, message = "Invalid ID supplied"),
			@ApiResponse(code = 200, message = "successful operation") })
	@RequestMapping(value = "/api/contacts/{contactId}", consumes = { "application/json",
			"application/xml" }, method = RequestMethod.PUT)
	default ResponseEntity<Void> updateContact(
			@ApiParam(value = "Id of the contact to be update. Cannot be empty.", required = true) @PathVariable("contactId") Long contactId,
			@ApiParam(value = "Contact to update. Cannot null or empty.", required = true) @Valid @RequestBody Contact contact) {
		return getDelegate().updateContact(contactId, contact);
	}

}
